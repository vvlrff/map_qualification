version: "3.9"

services:
  db:
    image: postgres:15
    env_file:
      - .env.dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - my-network

  rabbit:
    image: rabbitmq:3-management
    expose:
      - 5672
    ports:
      - "15673:15672"
      - "5672:5672"
    networks:
      - my-network

  mongo:
    image: mongo:latest
    expose:
      - 27017
    volumes:
      - mongo-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=examplepassword
    networks:
      - my-network

  pgadmin:
    image: dpage/pgadmin4:latest
    env_file:
      - .env.dev
    ports:
      - "8080:80"
    depends_on:
      - db
    networks:
      - my-network

  alembic:
    build:
      context: .
      dockerfile: alembic/Dockerfile
    env_file:
      - .env.dev
    depends_on:
      - db
    command: alembic upgrade head
    networks:
      - my-network

  elasticsearch:
    container_name: es-container
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    environment:
      - "discovery.type=single-node"
    ports:
      - "9200:9200"
    depends_on:
      - mongo
      - db
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - my-network

  kibana:
    container_name: kb-container
    image: docker.elastic.co/kibana/kibana:7.10.2
    environment:
      - ELASTICSEARCH_HOSTS=http://es-container:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - my-network

  parser:
    build:
      context: .
      dockerfile: parser/Dockerfile
    env_file:
      - .env.dev
    depends_on:
      - mongo
      - db
    command: python3 /app/parser/collect.py
    networks:
      - my-network
      
  # backend:
  #   build: ./backend
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     db:
  #       condition: service_healthy

  # frontend:
  #   build: ./frontend
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - backend

  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=vvlrff
  #     - GF_SECURITY_ADMIN_PASSWORD=vvlrff
  #   depends_on:
  #     db:
  #       condition: service_healthy

volumes:
  postgres_data:
  mongo-data:
  pgadmin_data:
  pgadmin_sessions:
  es-data:
    # grafana_data:

networks:
  my-network:
    driver: bridge
